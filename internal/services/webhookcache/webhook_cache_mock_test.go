// Code generated by MockGen. DO NOT EDIT.
// Source: webhook_cache.go
//
// Generated by this command:
//
//	mockgen -source=webhook_cache.go -destination=webhook_cache_mock_test.go -package=webhookcache
//

// Package webhookcache is a generated GoMock package.
package webhookcache

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/vehicle-triggers-api/internal/db/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InternalGetAllVehicleSubscriptions mocks base method.
func (m *MockRepository) InternalGetAllVehicleSubscriptions(ctx context.Context) ([]*models.VehicleSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalGetAllVehicleSubscriptions", ctx)
	ret0, _ := ret[0].([]*models.VehicleSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalGetAllVehicleSubscriptions indicates an expected call of InternalGetAllVehicleSubscriptions.
func (mr *MockRepositoryMockRecorder) InternalGetAllVehicleSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalGetAllVehicleSubscriptions", reflect.TypeOf((*MockRepository)(nil).InternalGetAllVehicleSubscriptions), ctx)
}

// InternalGetTriggerByID mocks base method.
func (m *MockRepository) InternalGetTriggerByID(ctx context.Context, triggerID string) (*models.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalGetTriggerByID", ctx, triggerID)
	ret0, _ := ret[0].(*models.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalGetTriggerByID indicates an expected call of InternalGetTriggerByID.
func (mr *MockRepositoryMockRecorder) InternalGetTriggerByID(ctx, triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalGetTriggerByID", reflect.TypeOf((*MockRepository)(nil).InternalGetTriggerByID), ctx, triggerID)
}
