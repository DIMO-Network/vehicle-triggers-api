// Code generated by MockGen. DO NOT EDIT.
// Source: trigger_evaluator.go
//
// Generated by this command:
//
//	mockgen -source=trigger_evaluator.go -destination=trigger_evaluator_mock_test.go -package=triggerevaluator
//

// Package triggerevaluator is a generated GoMock package.
package triggerevaluator

import (
	context "context"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	models "github.com/DIMO-Network/vehicle-triggers-api/internal/db/models"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockTriggerRepo is a mock of TriggerRepo interface.
type MockTriggerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerRepoMockRecorder
	isgomock struct{}
}

// MockTriggerRepoMockRecorder is the mock recorder for MockTriggerRepo.
type MockTriggerRepoMockRecorder struct {
	mock *MockTriggerRepo
}

// NewMockTriggerRepo creates a new mock instance.
func NewMockTriggerRepo(ctrl *gomock.Controller) *MockTriggerRepo {
	mock := &MockTriggerRepo{ctrl: ctrl}
	mock.recorder = &MockTriggerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerRepo) EXPECT() *MockTriggerRepoMockRecorder {
	return m.recorder
}

// GetLastLogValue mocks base method.
func (m *MockTriggerRepo) GetLastLogValue(ctx context.Context, triggerID string, assetDid cloudevent.ERC721DID) (*models.TriggerLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLogValue", ctx, triggerID, assetDid)
	ret0, _ := ret[0].(*models.TriggerLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastLogValue indicates an expected call of GetLastLogValue.
func (mr *MockTriggerRepoMockRecorder) GetLastLogValue(ctx, triggerID, assetDid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLogValue", reflect.TypeOf((*MockTriggerRepo)(nil).GetLastLogValue), ctx, triggerID, assetDid)
}

// MockTokenExchangeClient is a mock of TokenExchangeClient interface.
type MockTokenExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExchangeClientMockRecorder
	isgomock struct{}
}

// MockTokenExchangeClientMockRecorder is the mock recorder for MockTokenExchangeClient.
type MockTokenExchangeClientMockRecorder struct {
	mock *MockTokenExchangeClient
}

// NewMockTokenExchangeClient creates a new mock instance.
func NewMockTokenExchangeClient(ctrl *gomock.Controller) *MockTokenExchangeClient {
	mock := &MockTokenExchangeClient{ctrl: ctrl}
	mock.recorder = &MockTokenExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExchangeClient) EXPECT() *MockTokenExchangeClientMockRecorder {
	return m.recorder
}

// HasVehiclePermissions mocks base method.
func (m *MockTokenExchangeClient) HasVehiclePermissions(ctx context.Context, vehicleDID cloudevent.ERC721DID, developerLicense common.Address, permissions []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVehiclePermissions", ctx, vehicleDID, developerLicense, permissions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasVehiclePermissions indicates an expected call of HasVehiclePermissions.
func (mr *MockTokenExchangeClientMockRecorder) HasVehiclePermissions(ctx, vehicleDID, developerLicense, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVehiclePermissions", reflect.TypeOf((*MockTokenExchangeClient)(nil).HasVehiclePermissions), ctx, vehicleDID, developerLicense, permissions)
}
