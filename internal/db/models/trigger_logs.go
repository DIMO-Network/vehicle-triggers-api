// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TriggerLog is an object representing the database table.
type TriggerLog struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TriggerID       string      `boil:"trigger_id" json:"trigger_id" toml:"trigger_id" yaml:"trigger_id"`
	SnapshotData    types.JSON  `boil:"snapshot_data" json:"snapshot_data" toml:"snapshot_data" yaml:"snapshot_data"`
	LastTriggeredAt time.Time   `boil:"last_triggered_at" json:"last_triggered_at" toml:"last_triggered_at" yaml:"last_triggered_at"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	FailureReason   null.String `boil:"failure_reason" json:"failure_reason,omitempty" toml:"failure_reason" yaml:"failure_reason,omitempty"`
	AssetDid        string      `boil:"asset_did" json:"asset_did" toml:"asset_did" yaml:"asset_did"`

	R *triggerLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L triggerLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TriggerLogColumns = struct {
	ID              string
	TriggerID       string
	SnapshotData    string
	LastTriggeredAt string
	CreatedAt       string
	FailureReason   string
	AssetDid        string
}{
	ID:              "id",
	TriggerID:       "trigger_id",
	SnapshotData:    "snapshot_data",
	LastTriggeredAt: "last_triggered_at",
	CreatedAt:       "created_at",
	FailureReason:   "failure_reason",
	AssetDid:        "asset_did",
}

var TriggerLogTableColumns = struct {
	ID              string
	TriggerID       string
	SnapshotData    string
	LastTriggeredAt string
	CreatedAt       string
	FailureReason   string
	AssetDid        string
}{
	ID:              "trigger_logs.id",
	TriggerID:       "trigger_logs.trigger_id",
	SnapshotData:    "trigger_logs.snapshot_data",
	LastTriggeredAt: "trigger_logs.last_triggered_at",
	CreatedAt:       "trigger_logs.created_at",
	FailureReason:   "trigger_logs.failure_reason",
	AssetDid:        "trigger_logs.asset_did",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TriggerLogWhere = struct {
	ID              whereHelperstring
	TriggerID       whereHelperstring
	SnapshotData    whereHelpertypes_JSON
	LastTriggeredAt whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	FailureReason   whereHelpernull_String
	AssetDid        whereHelperstring
}{
	ID:              whereHelperstring{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"id\""},
	TriggerID:       whereHelperstring{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"trigger_id\""},
	SnapshotData:    whereHelpertypes_JSON{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"snapshot_data\""},
	LastTriggeredAt: whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"last_triggered_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"created_at\""},
	FailureReason:   whereHelpernull_String{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"failure_reason\""},
	AssetDid:        whereHelperstring{field: "\"vehicle_triggers_api\".\"trigger_logs\".\"asset_did\""},
}

// TriggerLogRels is where relationship names are stored.
var TriggerLogRels = struct {
	Trigger string
}{
	Trigger: "Trigger",
}

// triggerLogR is where relationships are stored.
type triggerLogR struct {
	Trigger *Trigger `boil:"Trigger" json:"Trigger" toml:"Trigger" yaml:"Trigger"`
}

// NewStruct creates a new relationship struct
func (*triggerLogR) NewStruct() *triggerLogR {
	return &triggerLogR{}
}

func (o *TriggerLog) GetTrigger() *Trigger {
	if o == nil {
		return nil
	}

	return o.R.GetTrigger()
}

func (r *triggerLogR) GetTrigger() *Trigger {
	if r == nil {
		return nil
	}

	return r.Trigger
}

// triggerLogL is where Load methods for each relationship are stored.
type triggerLogL struct{}

var (
	triggerLogAllColumns            = []string{"id", "trigger_id", "snapshot_data", "last_triggered_at", "created_at", "failure_reason", "asset_did"}
	triggerLogColumnsWithoutDefault = []string{"id", "trigger_id", "snapshot_data", "last_triggered_at", "asset_did"}
	triggerLogColumnsWithDefault    = []string{"created_at", "failure_reason"}
	triggerLogPrimaryKeyColumns     = []string{"id"}
	triggerLogGeneratedColumns      = []string{}
)

type (
	// TriggerLogSlice is an alias for a slice of pointers to TriggerLog.
	// This should almost always be used instead of []TriggerLog.
	TriggerLogSlice []*TriggerLog
	// TriggerLogHook is the signature for custom TriggerLog hook methods
	TriggerLogHook func(context.Context, boil.ContextExecutor, *TriggerLog) error

	triggerLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	triggerLogType                 = reflect.TypeOf(&TriggerLog{})
	triggerLogMapping              = queries.MakeStructMapping(triggerLogType)
	triggerLogPrimaryKeyMapping, _ = queries.BindMapping(triggerLogType, triggerLogMapping, triggerLogPrimaryKeyColumns)
	triggerLogInsertCacheMut       sync.RWMutex
	triggerLogInsertCache          = make(map[string]insertCache)
	triggerLogUpdateCacheMut       sync.RWMutex
	triggerLogUpdateCache          = make(map[string]updateCache)
	triggerLogUpsertCacheMut       sync.RWMutex
	triggerLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var triggerLogAfterSelectMu sync.Mutex
var triggerLogAfterSelectHooks []TriggerLogHook

var triggerLogBeforeInsertMu sync.Mutex
var triggerLogBeforeInsertHooks []TriggerLogHook
var triggerLogAfterInsertMu sync.Mutex
var triggerLogAfterInsertHooks []TriggerLogHook

var triggerLogBeforeUpdateMu sync.Mutex
var triggerLogBeforeUpdateHooks []TriggerLogHook
var triggerLogAfterUpdateMu sync.Mutex
var triggerLogAfterUpdateHooks []TriggerLogHook

var triggerLogBeforeDeleteMu sync.Mutex
var triggerLogBeforeDeleteHooks []TriggerLogHook
var triggerLogAfterDeleteMu sync.Mutex
var triggerLogAfterDeleteHooks []TriggerLogHook

var triggerLogBeforeUpsertMu sync.Mutex
var triggerLogBeforeUpsertHooks []TriggerLogHook
var triggerLogAfterUpsertMu sync.Mutex
var triggerLogAfterUpsertHooks []TriggerLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TriggerLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TriggerLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TriggerLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TriggerLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TriggerLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TriggerLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TriggerLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TriggerLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TriggerLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTriggerLogHook registers your hook function for all future operations.
func AddTriggerLogHook(hookPoint boil.HookPoint, triggerLogHook TriggerLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		triggerLogAfterSelectMu.Lock()
		triggerLogAfterSelectHooks = append(triggerLogAfterSelectHooks, triggerLogHook)
		triggerLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		triggerLogBeforeInsertMu.Lock()
		triggerLogBeforeInsertHooks = append(triggerLogBeforeInsertHooks, triggerLogHook)
		triggerLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		triggerLogAfterInsertMu.Lock()
		triggerLogAfterInsertHooks = append(triggerLogAfterInsertHooks, triggerLogHook)
		triggerLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		triggerLogBeforeUpdateMu.Lock()
		triggerLogBeforeUpdateHooks = append(triggerLogBeforeUpdateHooks, triggerLogHook)
		triggerLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		triggerLogAfterUpdateMu.Lock()
		triggerLogAfterUpdateHooks = append(triggerLogAfterUpdateHooks, triggerLogHook)
		triggerLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		triggerLogBeforeDeleteMu.Lock()
		triggerLogBeforeDeleteHooks = append(triggerLogBeforeDeleteHooks, triggerLogHook)
		triggerLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		triggerLogAfterDeleteMu.Lock()
		triggerLogAfterDeleteHooks = append(triggerLogAfterDeleteHooks, triggerLogHook)
		triggerLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		triggerLogBeforeUpsertMu.Lock()
		triggerLogBeforeUpsertHooks = append(triggerLogBeforeUpsertHooks, triggerLogHook)
		triggerLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		triggerLogAfterUpsertMu.Lock()
		triggerLogAfterUpsertHooks = append(triggerLogAfterUpsertHooks, triggerLogHook)
		triggerLogAfterUpsertMu.Unlock()
	}
}

// One returns a single triggerLog record from the query.
func (q triggerLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TriggerLog, error) {
	o := &TriggerLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trigger_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TriggerLog records from the query.
func (q triggerLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (TriggerLogSlice, error) {
	var o []*TriggerLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TriggerLog slice")
	}

	if len(triggerLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TriggerLog records in the query.
func (q triggerLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trigger_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q triggerLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trigger_logs exists")
	}

	return count > 0, nil
}

// Trigger pointed to by the foreign key.
func (o *TriggerLog) Trigger(mods ...qm.QueryMod) triggerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggerID),
	}

	queryMods = append(queryMods, mods...)

	return Triggers(queryMods...)
}

// LoadTrigger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerLogL) LoadTrigger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerLog interface{}, mods queries.Applicator) error {
	var slice []*TriggerLog
	var object *TriggerLog

	if singular {
		var ok bool
		object, ok = maybeTriggerLog.(*TriggerLog)
		if !ok {
			object = new(TriggerLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTriggerLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTriggerLog))
			}
		}
	} else {
		s, ok := maybeTriggerLog.(*[]*TriggerLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTriggerLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTriggerLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &triggerLogR{}
		}
		args[object.TriggerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerLogR{}
			}

			args[obj.TriggerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vehicle_triggers_api.triggers`),
		qm.WhereIn(`vehicle_triggers_api.triggers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for triggers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for triggers")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trigger = foreign
		if foreign.R == nil {
			foreign.R = &triggerR{}
		}
		foreign.R.TriggerLogs = append(foreign.R.TriggerLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggerID == foreign.ID {
				local.R.Trigger = foreign
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.TriggerLogs = append(foreign.R.TriggerLogs, local)
				break
			}
		}
	}

	return nil
}

// SetTrigger of the triggerLog to the related item.
// Sets o.R.Trigger to related.
// Adds o to related.R.TriggerLogs.
func (o *TriggerLog) SetTrigger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Trigger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_triggers_api\".\"trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggerID = related.ID
	if o.R == nil {
		o.R = &triggerLogR{
			Trigger: related,
		}
	} else {
		o.R.Trigger = related
	}

	if related.R == nil {
		related.R = &triggerR{
			TriggerLogs: TriggerLogSlice{o},
		}
	} else {
		related.R.TriggerLogs = append(related.R.TriggerLogs, o)
	}

	return nil
}

// TriggerLogs retrieves all the records using an executor.
func TriggerLogs(mods ...qm.QueryMod) triggerLogQuery {
	mods = append(mods, qm.From("\"vehicle_triggers_api\".\"trigger_logs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_triggers_api\".\"trigger_logs\".*"})
	}

	return triggerLogQuery{q}
}

// FindTriggerLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTriggerLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TriggerLog, error) {
	triggerLogObj := &TriggerLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_triggers_api\".\"trigger_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, triggerLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trigger_logs")
	}

	if err = triggerLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return triggerLogObj, err
	}

	return triggerLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TriggerLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trigger_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	triggerLogInsertCacheMut.RLock()
	cache, cached := triggerLogInsertCache[key]
	triggerLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			triggerLogAllColumns,
			triggerLogColumnsWithDefault,
			triggerLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(triggerLogType, triggerLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(triggerLogType, triggerLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_triggers_api\".\"trigger_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_triggers_api\".\"trigger_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trigger_logs")
	}

	if !cached {
		triggerLogInsertCacheMut.Lock()
		triggerLogInsertCache[key] = cache
		triggerLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TriggerLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TriggerLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	triggerLogUpdateCacheMut.RLock()
	cache, cached := triggerLogUpdateCache[key]
	triggerLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			triggerLogAllColumns,
			triggerLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trigger_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"trigger_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, triggerLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(triggerLogType, triggerLogMapping, append(wl, triggerLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trigger_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trigger_logs")
	}

	if !cached {
		triggerLogUpdateCacheMut.Lock()
		triggerLogUpdateCache[key] = cache
		triggerLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q triggerLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trigger_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TriggerLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, triggerLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in triggerLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all triggerLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TriggerLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no trigger_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	triggerLogUpsertCacheMut.RLock()
	cache, cached := triggerLogUpsertCache[key]
	triggerLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			triggerLogAllColumns,
			triggerLogColumnsWithDefault,
			triggerLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			triggerLogAllColumns,
			triggerLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trigger_logs, could not build update column list")
		}

		ret := strmangle.SetComplement(triggerLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(triggerLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert trigger_logs, could not build conflict column list")
			}

			conflict = make([]string, len(triggerLogPrimaryKeyColumns))
			copy(conflict, triggerLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_triggers_api\".\"trigger_logs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(triggerLogType, triggerLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(triggerLogType, triggerLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trigger_logs")
	}

	if !cached {
		triggerLogUpsertCacheMut.Lock()
		triggerLogUpsertCache[key] = cache
		triggerLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TriggerLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TriggerLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TriggerLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), triggerLogPrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_triggers_api\".\"trigger_logs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trigger_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q triggerLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no triggerLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trigger_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TriggerLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(triggerLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_triggers_api\".\"trigger_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from triggerLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trigger_logs")
	}

	if len(triggerLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TriggerLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTriggerLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TriggerLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TriggerLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_triggers_api\".\"trigger_logs\".* FROM \"vehicle_triggers_api\".\"trigger_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TriggerLogSlice")
	}

	*o = slice

	return nil
}

// TriggerLogExists checks if the TriggerLog row exists.
func TriggerLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_triggers_api\".\"trigger_logs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trigger_logs exists")
	}

	return exists, nil
}

// Exists checks if the TriggerLog row exists.
func (o *TriggerLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TriggerLogExists(ctx, exec, o.ID)
}
