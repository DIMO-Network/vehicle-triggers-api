// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleSubscription is an object representing the database table.
type VehicleSubscription struct {
	TriggerID string    `boil:"trigger_id" json:"trigger_id" toml:"trigger_id" yaml:"trigger_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	AssetDid  string    `boil:"asset_did" json:"asset_did" toml:"asset_did" yaml:"asset_did"`

	R *vehicleSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleSubscriptionColumns = struct {
	TriggerID string
	CreatedAt string
	UpdatedAt string
	AssetDid  string
}{
	TriggerID: "trigger_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	AssetDid:  "asset_did",
}

var VehicleSubscriptionTableColumns = struct {
	TriggerID string
	CreatedAt string
	UpdatedAt string
	AssetDid  string
}{
	TriggerID: "vehicle_subscriptions.trigger_id",
	CreatedAt: "vehicle_subscriptions.created_at",
	UpdatedAt: "vehicle_subscriptions.updated_at",
	AssetDid:  "vehicle_subscriptions.asset_did",
}

// Generated where

var VehicleSubscriptionWhere = struct {
	TriggerID whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	AssetDid  whereHelperstring
}{
	TriggerID: whereHelperstring{field: "\"vehicle_triggers_api\".\"vehicle_subscriptions\".\"trigger_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"vehicle_subscriptions\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"vehicle_subscriptions\".\"updated_at\""},
	AssetDid:  whereHelperstring{field: "\"vehicle_triggers_api\".\"vehicle_subscriptions\".\"asset_did\""},
}

// VehicleSubscriptionRels is where relationship names are stored.
var VehicleSubscriptionRels = struct {
	Trigger string
}{
	Trigger: "Trigger",
}

// vehicleSubscriptionR is where relationships are stored.
type vehicleSubscriptionR struct {
	Trigger *Trigger `boil:"Trigger" json:"Trigger" toml:"Trigger" yaml:"Trigger"`
}

// NewStruct creates a new relationship struct
func (*vehicleSubscriptionR) NewStruct() *vehicleSubscriptionR {
	return &vehicleSubscriptionR{}
}

func (o *VehicleSubscription) GetTrigger() *Trigger {
	if o == nil {
		return nil
	}

	return o.R.GetTrigger()
}

func (r *vehicleSubscriptionR) GetTrigger() *Trigger {
	if r == nil {
		return nil
	}

	return r.Trigger
}

// vehicleSubscriptionL is where Load methods for each relationship are stored.
type vehicleSubscriptionL struct{}

var (
	vehicleSubscriptionAllColumns            = []string{"trigger_id", "created_at", "updated_at", "asset_did"}
	vehicleSubscriptionColumnsWithoutDefault = []string{"trigger_id", "asset_did"}
	vehicleSubscriptionColumnsWithDefault    = []string{"created_at", "updated_at"}
	vehicleSubscriptionPrimaryKeyColumns     = []string{"asset_did", "trigger_id"}
	vehicleSubscriptionGeneratedColumns      = []string{}
)

type (
	// VehicleSubscriptionSlice is an alias for a slice of pointers to VehicleSubscription.
	// This should almost always be used instead of []VehicleSubscription.
	VehicleSubscriptionSlice []*VehicleSubscription
	// VehicleSubscriptionHook is the signature for custom VehicleSubscription hook methods
	VehicleSubscriptionHook func(context.Context, boil.ContextExecutor, *VehicleSubscription) error

	vehicleSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleSubscriptionType                 = reflect.TypeOf(&VehicleSubscription{})
	vehicleSubscriptionMapping              = queries.MakeStructMapping(vehicleSubscriptionType)
	vehicleSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, vehicleSubscriptionPrimaryKeyColumns)
	vehicleSubscriptionInsertCacheMut       sync.RWMutex
	vehicleSubscriptionInsertCache          = make(map[string]insertCache)
	vehicleSubscriptionUpdateCacheMut       sync.RWMutex
	vehicleSubscriptionUpdateCache          = make(map[string]updateCache)
	vehicleSubscriptionUpsertCacheMut       sync.RWMutex
	vehicleSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleSubscriptionAfterSelectMu sync.Mutex
var vehicleSubscriptionAfterSelectHooks []VehicleSubscriptionHook

var vehicleSubscriptionBeforeInsertMu sync.Mutex
var vehicleSubscriptionBeforeInsertHooks []VehicleSubscriptionHook
var vehicleSubscriptionAfterInsertMu sync.Mutex
var vehicleSubscriptionAfterInsertHooks []VehicleSubscriptionHook

var vehicleSubscriptionBeforeUpdateMu sync.Mutex
var vehicleSubscriptionBeforeUpdateHooks []VehicleSubscriptionHook
var vehicleSubscriptionAfterUpdateMu sync.Mutex
var vehicleSubscriptionAfterUpdateHooks []VehicleSubscriptionHook

var vehicleSubscriptionBeforeDeleteMu sync.Mutex
var vehicleSubscriptionBeforeDeleteHooks []VehicleSubscriptionHook
var vehicleSubscriptionAfterDeleteMu sync.Mutex
var vehicleSubscriptionAfterDeleteHooks []VehicleSubscriptionHook

var vehicleSubscriptionBeforeUpsertMu sync.Mutex
var vehicleSubscriptionBeforeUpsertHooks []VehicleSubscriptionHook
var vehicleSubscriptionAfterUpsertMu sync.Mutex
var vehicleSubscriptionAfterUpsertHooks []VehicleSubscriptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleSubscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleSubscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleSubscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleSubscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleSubscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleSubscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleSubscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleSubscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleSubscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleSubscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleSubscriptionHook registers your hook function for all future operations.
func AddVehicleSubscriptionHook(hookPoint boil.HookPoint, vehicleSubscriptionHook VehicleSubscriptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleSubscriptionAfterSelectMu.Lock()
		vehicleSubscriptionAfterSelectHooks = append(vehicleSubscriptionAfterSelectHooks, vehicleSubscriptionHook)
		vehicleSubscriptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vehicleSubscriptionBeforeInsertMu.Lock()
		vehicleSubscriptionBeforeInsertHooks = append(vehicleSubscriptionBeforeInsertHooks, vehicleSubscriptionHook)
		vehicleSubscriptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vehicleSubscriptionAfterInsertMu.Lock()
		vehicleSubscriptionAfterInsertHooks = append(vehicleSubscriptionAfterInsertHooks, vehicleSubscriptionHook)
		vehicleSubscriptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vehicleSubscriptionBeforeUpdateMu.Lock()
		vehicleSubscriptionBeforeUpdateHooks = append(vehicleSubscriptionBeforeUpdateHooks, vehicleSubscriptionHook)
		vehicleSubscriptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vehicleSubscriptionAfterUpdateMu.Lock()
		vehicleSubscriptionAfterUpdateHooks = append(vehicleSubscriptionAfterUpdateHooks, vehicleSubscriptionHook)
		vehicleSubscriptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vehicleSubscriptionBeforeDeleteMu.Lock()
		vehicleSubscriptionBeforeDeleteHooks = append(vehicleSubscriptionBeforeDeleteHooks, vehicleSubscriptionHook)
		vehicleSubscriptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vehicleSubscriptionAfterDeleteMu.Lock()
		vehicleSubscriptionAfterDeleteHooks = append(vehicleSubscriptionAfterDeleteHooks, vehicleSubscriptionHook)
		vehicleSubscriptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vehicleSubscriptionBeforeUpsertMu.Lock()
		vehicleSubscriptionBeforeUpsertHooks = append(vehicleSubscriptionBeforeUpsertHooks, vehicleSubscriptionHook)
		vehicleSubscriptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vehicleSubscriptionAfterUpsertMu.Lock()
		vehicleSubscriptionAfterUpsertHooks = append(vehicleSubscriptionAfterUpsertHooks, vehicleSubscriptionHook)
		vehicleSubscriptionAfterUpsertMu.Unlock()
	}
}

// One returns a single vehicleSubscription record from the query.
func (q vehicleSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleSubscription, error) {
	o := &VehicleSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_subscriptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleSubscription records from the query.
func (q vehicleSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleSubscriptionSlice, error) {
	var o []*VehicleSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleSubscription slice")
	}

	if len(vehicleSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleSubscription records in the query.
func (q vehicleSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_subscriptions exists")
	}

	return count > 0, nil
}

// Trigger pointed to by the foreign key.
func (o *VehicleSubscription) Trigger(mods ...qm.QueryMod) triggerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggerID),
	}

	queryMods = append(queryMods, mods...)

	return Triggers(queryMods...)
}

// LoadTrigger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehicleSubscriptionL) LoadTrigger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleSubscription interface{}, mods queries.Applicator) error {
	var slice []*VehicleSubscription
	var object *VehicleSubscription

	if singular {
		var ok bool
		object, ok = maybeVehicleSubscription.(*VehicleSubscription)
		if !ok {
			object = new(VehicleSubscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleSubscription))
			}
		}
	} else {
		s, ok := maybeVehicleSubscription.(*[]*VehicleSubscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &vehicleSubscriptionR{}
		}
		args[object.TriggerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleSubscriptionR{}
			}

			args[obj.TriggerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vehicle_triggers_api.triggers`),
		qm.WhereIn(`vehicle_triggers_api.triggers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for triggers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for triggers")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trigger = foreign
		if foreign.R == nil {
			foreign.R = &triggerR{}
		}
		foreign.R.VehicleSubscriptions = append(foreign.R.VehicleSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggerID == foreign.ID {
				local.R.Trigger = foreign
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.VehicleSubscriptions = append(foreign.R.VehicleSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetTrigger of the vehicleSubscription to the related item.
// Sets o.R.Trigger to related.
// Adds o to related.R.VehicleSubscriptions.
func (o *VehicleSubscription) SetTrigger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Trigger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_triggers_api\".\"vehicle_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehicleSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AssetDid, o.TriggerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggerID = related.ID
	if o.R == nil {
		o.R = &vehicleSubscriptionR{
			Trigger: related,
		}
	} else {
		o.R.Trigger = related
	}

	if related.R == nil {
		related.R = &triggerR{
			VehicleSubscriptions: VehicleSubscriptionSlice{o},
		}
	} else {
		related.R.VehicleSubscriptions = append(related.R.VehicleSubscriptions, o)
	}

	return nil
}

// VehicleSubscriptions retrieves all the records using an executor.
func VehicleSubscriptions(mods ...qm.QueryMod) vehicleSubscriptionQuery {
	mods = append(mods, qm.From("\"vehicle_triggers_api\".\"vehicle_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_triggers_api\".\"vehicle_subscriptions\".*"})
	}

	return vehicleSubscriptionQuery{q}
}

// FindVehicleSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleSubscription(ctx context.Context, exec boil.ContextExecutor, assetDid string, triggerID string, selectCols ...string) (*VehicleSubscription, error) {
	vehicleSubscriptionObj := &VehicleSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_triggers_api\".\"vehicle_subscriptions\" where \"asset_did\"=$1 AND \"trigger_id\"=$2", sel,
	)

	q := queries.Raw(query, assetDid, triggerID)

	err := q.Bind(ctx, exec, vehicleSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_subscriptions")
	}

	if err = vehicleSubscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleSubscriptionObj, err
	}

	return vehicleSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_subscriptions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleSubscriptionInsertCacheMut.RLock()
	cache, cached := vehicleSubscriptionInsertCache[key]
	vehicleSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleSubscriptionAllColumns,
			vehicleSubscriptionColumnsWithDefault,
			vehicleSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_triggers_api\".\"vehicle_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_triggers_api\".\"vehicle_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_subscriptions")
	}

	if !cached {
		vehicleSubscriptionInsertCacheMut.Lock()
		vehicleSubscriptionInsertCache[key] = cache
		vehicleSubscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleSubscriptionUpdateCacheMut.RLock()
	cache, cached := vehicleSubscriptionUpdateCache[key]
	vehicleSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleSubscriptionAllColumns,
			vehicleSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"vehicle_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, append(wl, vehicleSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_subscriptions")
	}

	if !cached {
		vehicleSubscriptionUpdateCacheMut.Lock()
		vehicleSubscriptionUpdateCache[key] = cache
		vehicleSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"vehicle_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleSubscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleSubscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no vehicle_subscriptions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleSubscriptionUpsertCacheMut.RLock()
	cache, cached := vehicleSubscriptionUpsertCache[key]
	vehicleSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vehicleSubscriptionAllColumns,
			vehicleSubscriptionColumnsWithDefault,
			vehicleSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleSubscriptionAllColumns,
			vehicleSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(vehicleSubscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vehicleSubscriptionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert vehicle_subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(vehicleSubscriptionPrimaryKeyColumns))
			copy(conflict, vehicleSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_triggers_api\".\"vehicle_subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleSubscriptionType, vehicleSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_subscriptions")
	}

	if !cached {
		vehicleSubscriptionUpsertCacheMut.Lock()
		vehicleSubscriptionUpsertCache[key] = cache
		vehicleSubscriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleSubscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_triggers_api\".\"vehicle_subscriptions\" WHERE \"asset_did\"=$1 AND \"trigger_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_subscriptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleSubscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_triggers_api\".\"vehicle_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_subscriptions")
	}

	if len(vehicleSubscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleSubscription(ctx, exec, o.AssetDid, o.TriggerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_triggers_api\".\"vehicle_subscriptions\".* FROM \"vehicle_triggers_api\".\"vehicle_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleSubscriptionSlice")
	}

	*o = slice

	return nil
}

// VehicleSubscriptionExists checks if the VehicleSubscription row exists.
func VehicleSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, assetDid string, triggerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_triggers_api\".\"vehicle_subscriptions\" where \"asset_did\"=$1 AND \"trigger_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assetDid, triggerID)
	}
	row := exec.QueryRowContext(ctx, sql, assetDid, triggerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the VehicleSubscription row exists.
func (o *VehicleSubscription) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VehicleSubscriptionExists(ctx, exec, o.AssetDid, o.TriggerID)
}
