// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Trigger is an object representing the database table.
type Trigger struct {
	ID                      string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Service                 string      `boil:"service" json:"service" toml:"service" yaml:"service"`
	MetricName              string      `boil:"metric_name" json:"metric_name" toml:"metric_name" yaml:"metric_name"`
	Condition               string      `boil:"condition" json:"condition" toml:"condition" yaml:"condition"`
	TargetURI               string      `boil:"target_uri" json:"target_uri" toml:"target_uri" yaml:"target_uri"`
	CooldownPeriod          int         `boil:"cooldown_period" json:"cooldown_period" toml:"cooldown_period" yaml:"cooldown_period"`
	DeveloperLicenseAddress []byte      `boil:"developer_license_address" json:"developer_license_address" toml:"developer_license_address" yaml:"developer_license_address"`
	CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Status                  string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	FailureCount            int         `boil:"failure_count" json:"failure_count" toml:"failure_count" yaml:"failure_count"`
	DisplayName             string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`

	R *triggerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L triggerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TriggerColumns = struct {
	ID                      string
	Service                 string
	MetricName              string
	Condition               string
	TargetURI               string
	CooldownPeriod          string
	DeveloperLicenseAddress string
	CreatedAt               string
	UpdatedAt               string
	Status                  string
	Description             string
	FailureCount            string
	DisplayName             string
}{
	ID:                      "id",
	Service:                 "service",
	MetricName:              "metric_name",
	Condition:               "condition",
	TargetURI:               "target_uri",
	CooldownPeriod:          "cooldown_period",
	DeveloperLicenseAddress: "developer_license_address",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	Status:                  "status",
	Description:             "description",
	FailureCount:            "failure_count",
	DisplayName:             "display_name",
}

var TriggerTableColumns = struct {
	ID                      string
	Service                 string
	MetricName              string
	Condition               string
	TargetURI               string
	CooldownPeriod          string
	DeveloperLicenseAddress string
	CreatedAt               string
	UpdatedAt               string
	Status                  string
	Description             string
	FailureCount            string
	DisplayName             string
}{
	ID:                      "triggers.id",
	Service:                 "triggers.service",
	MetricName:              "triggers.metric_name",
	Condition:               "triggers.condition",
	TargetURI:               "triggers.target_uri",
	CooldownPeriod:          "triggers.cooldown_period",
	DeveloperLicenseAddress: "triggers.developer_license_address",
	CreatedAt:               "triggers.created_at",
	UpdatedAt:               "triggers.updated_at",
	Status:                  "triggers.status",
	Description:             "triggers.description",
	FailureCount:            "triggers.failure_count",
	DisplayName:             "triggers.display_name",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TriggerWhere = struct {
	ID                      whereHelperstring
	Service                 whereHelperstring
	MetricName              whereHelperstring
	Condition               whereHelperstring
	TargetURI               whereHelperstring
	CooldownPeriod          whereHelperint
	DeveloperLicenseAddress whereHelper__byte
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
	Status                  whereHelperstring
	Description             whereHelpernull_String
	FailureCount            whereHelperint
	DisplayName             whereHelperstring
}{
	ID:                      whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"id\""},
	Service:                 whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"service\""},
	MetricName:              whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"metric_name\""},
	Condition:               whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"condition\""},
	TargetURI:               whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"target_uri\""},
	CooldownPeriod:          whereHelperint{field: "\"vehicle_triggers_api\".\"triggers\".\"cooldown_period\""},
	DeveloperLicenseAddress: whereHelper__byte{field: "\"vehicle_triggers_api\".\"triggers\".\"developer_license_address\""},
	CreatedAt:               whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"triggers\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"vehicle_triggers_api\".\"triggers\".\"updated_at\""},
	Status:                  whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"status\""},
	Description:             whereHelpernull_String{field: "\"vehicle_triggers_api\".\"triggers\".\"description\""},
	FailureCount:            whereHelperint{field: "\"vehicle_triggers_api\".\"triggers\".\"failure_count\""},
	DisplayName:             whereHelperstring{field: "\"vehicle_triggers_api\".\"triggers\".\"display_name\""},
}

// TriggerRels is where relationship names are stored.
var TriggerRels = struct {
	TriggerLogs          string
	VehicleSubscriptions string
}{
	TriggerLogs:          "TriggerLogs",
	VehicleSubscriptions: "VehicleSubscriptions",
}

// triggerR is where relationships are stored.
type triggerR struct {
	TriggerLogs          TriggerLogSlice          `boil:"TriggerLogs" json:"TriggerLogs" toml:"TriggerLogs" yaml:"TriggerLogs"`
	VehicleSubscriptions VehicleSubscriptionSlice `boil:"VehicleSubscriptions" json:"VehicleSubscriptions" toml:"VehicleSubscriptions" yaml:"VehicleSubscriptions"`
}

// NewStruct creates a new relationship struct
func (*triggerR) NewStruct() *triggerR {
	return &triggerR{}
}

func (o *Trigger) GetTriggerLogs() TriggerLogSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTriggerLogs()
}

func (r *triggerR) GetTriggerLogs() TriggerLogSlice {
	if r == nil {
		return nil
	}

	return r.TriggerLogs
}

func (o *Trigger) GetVehicleSubscriptions() VehicleSubscriptionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetVehicleSubscriptions()
}

func (r *triggerR) GetVehicleSubscriptions() VehicleSubscriptionSlice {
	if r == nil {
		return nil
	}

	return r.VehicleSubscriptions
}

// triggerL is where Load methods for each relationship are stored.
type triggerL struct{}

var (
	triggerAllColumns            = []string{"id", "service", "metric_name", "condition", "target_uri", "cooldown_period", "developer_license_address", "created_at", "updated_at", "status", "description", "failure_count", "display_name"}
	triggerColumnsWithoutDefault = []string{"id", "service", "metric_name", "condition", "target_uri", "developer_license_address", "status"}
	triggerColumnsWithDefault    = []string{"cooldown_period", "created_at", "updated_at", "description", "failure_count", "display_name"}
	triggerPrimaryKeyColumns     = []string{"id"}
	triggerGeneratedColumns      = []string{}
)

type (
	// TriggerSlice is an alias for a slice of pointers to Trigger.
	// This should almost always be used instead of []Trigger.
	TriggerSlice []*Trigger
	// TriggerHook is the signature for custom Trigger hook methods
	TriggerHook func(context.Context, boil.ContextExecutor, *Trigger) error

	triggerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	triggerType                 = reflect.TypeOf(&Trigger{})
	triggerMapping              = queries.MakeStructMapping(triggerType)
	triggerPrimaryKeyMapping, _ = queries.BindMapping(triggerType, triggerMapping, triggerPrimaryKeyColumns)
	triggerInsertCacheMut       sync.RWMutex
	triggerInsertCache          = make(map[string]insertCache)
	triggerUpdateCacheMut       sync.RWMutex
	triggerUpdateCache          = make(map[string]updateCache)
	triggerUpsertCacheMut       sync.RWMutex
	triggerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var triggerAfterSelectMu sync.Mutex
var triggerAfterSelectHooks []TriggerHook

var triggerBeforeInsertMu sync.Mutex
var triggerBeforeInsertHooks []TriggerHook
var triggerAfterInsertMu sync.Mutex
var triggerAfterInsertHooks []TriggerHook

var triggerBeforeUpdateMu sync.Mutex
var triggerBeforeUpdateHooks []TriggerHook
var triggerAfterUpdateMu sync.Mutex
var triggerAfterUpdateHooks []TriggerHook

var triggerBeforeDeleteMu sync.Mutex
var triggerBeforeDeleteHooks []TriggerHook
var triggerAfterDeleteMu sync.Mutex
var triggerAfterDeleteHooks []TriggerHook

var triggerBeforeUpsertMu sync.Mutex
var triggerBeforeUpsertHooks []TriggerHook
var triggerAfterUpsertMu sync.Mutex
var triggerAfterUpsertHooks []TriggerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trigger) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trigger) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trigger) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trigger) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trigger) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trigger) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trigger) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trigger) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trigger) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTriggerHook registers your hook function for all future operations.
func AddTriggerHook(hookPoint boil.HookPoint, triggerHook TriggerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		triggerAfterSelectMu.Lock()
		triggerAfterSelectHooks = append(triggerAfterSelectHooks, triggerHook)
		triggerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		triggerBeforeInsertMu.Lock()
		triggerBeforeInsertHooks = append(triggerBeforeInsertHooks, triggerHook)
		triggerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		triggerAfterInsertMu.Lock()
		triggerAfterInsertHooks = append(triggerAfterInsertHooks, triggerHook)
		triggerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		triggerBeforeUpdateMu.Lock()
		triggerBeforeUpdateHooks = append(triggerBeforeUpdateHooks, triggerHook)
		triggerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		triggerAfterUpdateMu.Lock()
		triggerAfterUpdateHooks = append(triggerAfterUpdateHooks, triggerHook)
		triggerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		triggerBeforeDeleteMu.Lock()
		triggerBeforeDeleteHooks = append(triggerBeforeDeleteHooks, triggerHook)
		triggerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		triggerAfterDeleteMu.Lock()
		triggerAfterDeleteHooks = append(triggerAfterDeleteHooks, triggerHook)
		triggerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		triggerBeforeUpsertMu.Lock()
		triggerBeforeUpsertHooks = append(triggerBeforeUpsertHooks, triggerHook)
		triggerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		triggerAfterUpsertMu.Lock()
		triggerAfterUpsertHooks = append(triggerAfterUpsertHooks, triggerHook)
		triggerAfterUpsertMu.Unlock()
	}
}

// One returns a single trigger record from the query.
func (q triggerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Trigger, error) {
	o := &Trigger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for triggers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Trigger records from the query.
func (q triggerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TriggerSlice, error) {
	var o []*Trigger

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Trigger slice")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Trigger records in the query.
func (q triggerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count triggers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q triggerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if triggers exists")
	}

	return count > 0, nil
}

// TriggerLogs retrieves all the trigger_log's TriggerLogs with an executor.
func (o *Trigger) TriggerLogs(mods ...qm.QueryMod) triggerLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_triggers_api\".\"trigger_logs\".\"trigger_id\"=?", o.ID),
	)

	return TriggerLogs(queryMods...)
}

// VehicleSubscriptions retrieves all the vehicle_subscription's VehicleSubscriptions with an executor.
func (o *Trigger) VehicleSubscriptions(mods ...qm.QueryMod) vehicleSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_triggers_api\".\"vehicle_subscriptions\".\"trigger_id\"=?", o.ID),
	)

	return VehicleSubscriptions(queryMods...)
}

// LoadTriggerLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (triggerL) LoadTriggerLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrigger interface{}, mods queries.Applicator) error {
	var slice []*Trigger
	var object *Trigger

	if singular {
		var ok bool
		object, ok = maybeTrigger.(*Trigger)
		if !ok {
			object = new(Trigger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrigger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrigger))
			}
		}
	} else {
		s, ok := maybeTrigger.(*[]*Trigger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrigger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrigger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &triggerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vehicle_triggers_api.trigger_logs`),
		qm.WhereIn(`vehicle_triggers_api.trigger_logs.trigger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_logs")
	}

	var resultSlice []*TriggerLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_logs")
	}

	if len(triggerLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TriggerLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerLogR{}
			}
			foreign.R.Trigger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TriggerID {
				local.R.TriggerLogs = append(local.R.TriggerLogs, foreign)
				if foreign.R == nil {
					foreign.R = &triggerLogR{}
				}
				foreign.R.Trigger = local
				break
			}
		}
	}

	return nil
}

// LoadVehicleSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (triggerL) LoadVehicleSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrigger interface{}, mods queries.Applicator) error {
	var slice []*Trigger
	var object *Trigger

	if singular {
		var ok bool
		object, ok = maybeTrigger.(*Trigger)
		if !ok {
			object = new(Trigger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTrigger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTrigger))
			}
		}
	} else {
		s, ok := maybeTrigger.(*[]*Trigger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTrigger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTrigger))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &triggerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vehicle_triggers_api.vehicle_subscriptions`),
		qm.WhereIn(`vehicle_triggers_api.vehicle_subscriptions.trigger_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vehicle_subscriptions")
	}

	var resultSlice []*VehicleSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vehicle_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vehicle_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_subscriptions")
	}

	if len(vehicleSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VehicleSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vehicleSubscriptionR{}
			}
			foreign.R.Trigger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TriggerID {
				local.R.VehicleSubscriptions = append(local.R.VehicleSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &vehicleSubscriptionR{}
				}
				foreign.R.Trigger = local
				break
			}
		}
	}

	return nil
}

// AddTriggerLogs adds the given related objects to the existing relationships
// of the trigger, optionally inserting them as new records.
// Appends related to o.R.TriggerLogs.
// Sets related.R.Trigger appropriately.
func (o *Trigger) AddTriggerLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TriggerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_triggers_api\".\"trigger_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TriggerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &triggerR{
			TriggerLogs: related,
		}
	} else {
		o.R.TriggerLogs = append(o.R.TriggerLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerLogR{
				Trigger: o,
			}
		} else {
			rel.R.Trigger = o
		}
	}
	return nil
}

// AddVehicleSubscriptions adds the given related objects to the existing relationships
// of the trigger, optionally inserting them as new records.
// Appends related to o.R.VehicleSubscriptions.
// Sets related.R.Trigger appropriately.
func (o *Trigger) AddVehicleSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VehicleSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TriggerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_triggers_api\".\"vehicle_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
				strmangle.WhereClause("\"", "\"", 2, vehicleSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AssetDid, rel.TriggerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TriggerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &triggerR{
			VehicleSubscriptions: related,
		}
	} else {
		o.R.VehicleSubscriptions = append(o.R.VehicleSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vehicleSubscriptionR{
				Trigger: o,
			}
		} else {
			rel.R.Trigger = o
		}
	}
	return nil
}

// Triggers retrieves all the records using an executor.
func Triggers(mods ...qm.QueryMod) triggerQuery {
	mods = append(mods, qm.From("\"vehicle_triggers_api\".\"triggers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_triggers_api\".\"triggers\".*"})
	}

	return triggerQuery{q}
}

// FindTrigger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrigger(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Trigger, error) {
	triggerObj := &Trigger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_triggers_api\".\"triggers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, triggerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from triggers")
	}

	if err = triggerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return triggerObj, err
	}

	return triggerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trigger) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no triggers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	triggerInsertCacheMut.RLock()
	cache, cached := triggerInsertCache[key]
	triggerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			triggerAllColumns,
			triggerColumnsWithDefault,
			triggerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(triggerType, triggerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(triggerType, triggerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_triggers_api\".\"triggers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_triggers_api\".\"triggers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into triggers")
	}

	if !cached {
		triggerInsertCacheMut.Lock()
		triggerInsertCache[key] = cache
		triggerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Trigger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trigger) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	triggerUpdateCacheMut.RLock()
	cache, cached := triggerUpdateCache[key]
	triggerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			triggerAllColumns,
			triggerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update triggers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"triggers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, triggerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(triggerType, triggerMapping, append(wl, triggerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update triggers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for triggers")
	}

	if !cached {
		triggerUpdateCacheMut.Lock()
		triggerUpdateCache[key] = cache
		triggerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q triggerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for triggers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TriggerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_triggers_api\".\"triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, triggerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trigger")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trigger) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no triggers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	triggerUpsertCacheMut.RLock()
	cache, cached := triggerUpsertCache[key]
	triggerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			triggerAllColumns,
			triggerColumnsWithDefault,
			triggerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			triggerAllColumns,
			triggerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert triggers, could not build update column list")
		}

		ret := strmangle.SetComplement(triggerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(triggerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert triggers, could not build conflict column list")
			}

			conflict = make([]string, len(triggerPrimaryKeyColumns))
			copy(conflict, triggerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_triggers_api\".\"triggers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(triggerType, triggerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(triggerType, triggerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert triggers")
	}

	if !cached {
		triggerUpsertCacheMut.Lock()
		triggerUpsertCache[key] = cache
		triggerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Trigger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trigger) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Trigger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), triggerPrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_triggers_api\".\"triggers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for triggers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q triggerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no triggerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for triggers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TriggerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(triggerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_triggers_api\".\"triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for triggers")
	}

	if len(triggerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trigger) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrigger(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TriggerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TriggerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_triggers_api\".\"triggers\".* FROM \"vehicle_triggers_api\".\"triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TriggerSlice")
	}

	*o = slice

	return nil
}

// TriggerExists checks if the Trigger row exists.
func TriggerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_triggers_api\".\"triggers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if triggers exists")
	}

	return exists, nil
}

// Exists checks if the Trigger row exists.
func (o *Trigger) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TriggerExists(ctx, exec, o.ID)
}
