// Code generated by MockGen. DO NOT EDIT.
// Source: metric_listener.go
//
// Generated by this command:
//
//	mockgen -source=metric_listener.go -destination=metric_listener_mock_test.go -package=metriclistener
//

// Package metriclistener is a generated GoMock package.
package metriclistener

import (
	context "context"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	webhook "github.com/DIMO-Network/vehicle-triggers-api/internal/controllers/webhook"
	models "github.com/DIMO-Network/vehicle-triggers-api/internal/db/models"
	triggerevaluator "github.com/DIMO-Network/vehicle-triggers-api/internal/services/triggerevaluator"
	webhookcache "github.com/DIMO-Network/vehicle-triggers-api/internal/services/webhookcache"
	cel "github.com/google/cel-go/cel"
	gomock "go.uber.org/mock/gomock"
)

// MockTriggerRepo is a mock of TriggerRepo interface.
type MockTriggerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerRepoMockRecorder
	isgomock struct{}
}

// MockTriggerRepoMockRecorder is the mock recorder for MockTriggerRepo.
type MockTriggerRepoMockRecorder struct {
	mock *MockTriggerRepo
}

// NewMockTriggerRepo creates a new mock instance.
func NewMockTriggerRepo(ctrl *gomock.Controller) *MockTriggerRepo {
	mock := &MockTriggerRepo{ctrl: ctrl}
	mock.recorder = &MockTriggerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerRepo) EXPECT() *MockTriggerRepoMockRecorder {
	return m.recorder
}

// CreateTriggerLog mocks base method.
func (m *MockTriggerRepo) CreateTriggerLog(ctx context.Context, triggerLog *models.TriggerLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggerLog", ctx, triggerLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTriggerLog indicates an expected call of CreateTriggerLog.
func (mr *MockTriggerRepoMockRecorder) CreateTriggerLog(ctx, triggerLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerLog", reflect.TypeOf((*MockTriggerRepo)(nil).CreateTriggerLog), ctx, triggerLog)
}

// DeleteVehicleSubscription mocks base method.
func (m *MockTriggerRepo) DeleteVehicleSubscription(ctx context.Context, triggerID string, assetDid cloudevent.ERC721DID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicleSubscription", ctx, triggerID, assetDid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVehicleSubscription indicates an expected call of DeleteVehicleSubscription.
func (mr *MockTriggerRepoMockRecorder) DeleteVehicleSubscription(ctx, triggerID, assetDid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicleSubscription", reflect.TypeOf((*MockTriggerRepo)(nil).DeleteVehicleSubscription), ctx, triggerID, assetDid)
}

// IncrementTriggerFailureCount mocks base method.
func (m *MockTriggerRepo) IncrementTriggerFailureCount(ctx context.Context, trigger *models.Trigger, failureReason error, maxFailureCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementTriggerFailureCount", ctx, trigger, failureReason, maxFailureCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementTriggerFailureCount indicates an expected call of IncrementTriggerFailureCount.
func (mr *MockTriggerRepoMockRecorder) IncrementTriggerFailureCount(ctx, trigger, failureReason, maxFailureCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementTriggerFailureCount", reflect.TypeOf((*MockTriggerRepo)(nil).IncrementTriggerFailureCount), ctx, trigger, failureReason, maxFailureCount)
}

// ResetTriggerFailureCount mocks base method.
func (m *MockTriggerRepo) ResetTriggerFailureCount(ctx context.Context, trigger *models.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetTriggerFailureCount", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetTriggerFailureCount indicates an expected call of ResetTriggerFailureCount.
func (mr *MockTriggerRepoMockRecorder) ResetTriggerFailureCount(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetTriggerFailureCount", reflect.TypeOf((*MockTriggerRepo)(nil).ResetTriggerFailureCount), ctx, trigger)
}

// MockWebhookSender is a mock of WebhookSender interface.
type MockWebhookSender struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookSenderMockRecorder
	isgomock struct{}
}

// MockWebhookSenderMockRecorder is the mock recorder for MockWebhookSender.
type MockWebhookSenderMockRecorder struct {
	mock *MockWebhookSender
}

// NewMockWebhookSender creates a new mock instance.
func NewMockWebhookSender(ctrl *gomock.Controller) *MockWebhookSender {
	mock := &MockWebhookSender{ctrl: ctrl}
	mock.recorder = &MockWebhookSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookSender) EXPECT() *MockWebhookSenderMockRecorder {
	return m.recorder
}

// SendWebhook mocks base method.
func (m *MockWebhookSender) SendWebhook(ctx context.Context, trigger *models.Trigger, payload *cloudevent.CloudEvent[webhook.WebhookPayload]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhook", ctx, trigger, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhook indicates an expected call of SendWebhook.
func (mr *MockWebhookSenderMockRecorder) SendWebhook(ctx, trigger, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhook", reflect.TypeOf((*MockWebhookSender)(nil).SendWebhook), ctx, trigger, payload)
}

// MockWebhookFailureManager is a mock of WebhookFailureManager interface.
type MockWebhookFailureManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookFailureManagerMockRecorder
	isgomock struct{}
}

// MockWebhookFailureManagerMockRecorder is the mock recorder for MockWebhookFailureManager.
type MockWebhookFailureManagerMockRecorder struct {
	mock *MockWebhookFailureManager
}

// NewMockWebhookFailureManager creates a new mock instance.
func NewMockWebhookFailureManager(ctrl *gomock.Controller) *MockWebhookFailureManager {
	mock := &MockWebhookFailureManager{ctrl: ctrl}
	mock.recorder = &MockWebhookFailureManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookFailureManager) EXPECT() *MockWebhookFailureManagerMockRecorder {
	return m.recorder
}

// HandleWebhookFailure mocks base method.
func (m *MockWebhookFailureManager) HandleWebhookFailure(ctx context.Context, trigger *models.Trigger, failureReason error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhookFailure", ctx, trigger, failureReason)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWebhookFailure indicates an expected call of HandleWebhookFailure.
func (mr *MockWebhookFailureManagerMockRecorder) HandleWebhookFailure(ctx, trigger, failureReason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhookFailure", reflect.TypeOf((*MockWebhookFailureManager)(nil).HandleWebhookFailure), ctx, trigger, failureReason)
}

// HandleWebhookSuccess mocks base method.
func (m *MockWebhookFailureManager) HandleWebhookSuccess(ctx context.Context, trigger *models.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhookSuccess", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWebhookSuccess indicates an expected call of HandleWebhookSuccess.
func (mr *MockWebhookFailureManagerMockRecorder) HandleWebhookSuccess(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhookSuccess", reflect.TypeOf((*MockWebhookFailureManager)(nil).HandleWebhookSuccess), ctx, trigger)
}

// ShouldAttemptWebhook mocks base method.
func (m *MockWebhookFailureManager) ShouldAttemptWebhook(trigger *models.Trigger) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAttemptWebhook", trigger)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldAttemptWebhook indicates an expected call of ShouldAttemptWebhook.
func (mr *MockWebhookFailureManagerMockRecorder) ShouldAttemptWebhook(trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAttemptWebhook", reflect.TypeOf((*MockWebhookFailureManager)(nil).ShouldAttemptWebhook), trigger)
}

// MockTriggerEvaluator is a mock of TriggerEvaluator interface.
type MockTriggerEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerEvaluatorMockRecorder
	isgomock struct{}
}

// MockTriggerEvaluatorMockRecorder is the mock recorder for MockTriggerEvaluator.
type MockTriggerEvaluatorMockRecorder struct {
	mock *MockTriggerEvaluator
}

// NewMockTriggerEvaluator creates a new mock instance.
func NewMockTriggerEvaluator(ctrl *gomock.Controller) *MockTriggerEvaluator {
	mock := &MockTriggerEvaluator{ctrl: ctrl}
	mock.recorder = &MockTriggerEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerEvaluator) EXPECT() *MockTriggerEvaluatorMockRecorder {
	return m.recorder
}

// EvaluateEventTrigger mocks base method.
func (m *MockTriggerEvaluator) EvaluateEventTrigger(ctx context.Context, trigger *models.Trigger, program cel.Program, ev *triggerevaluator.EventEvaluationData) (*triggerevaluator.TriggerEvaluationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateEventTrigger", ctx, trigger, program, ev)
	ret0, _ := ret[0].(*triggerevaluator.TriggerEvaluationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateEventTrigger indicates an expected call of EvaluateEventTrigger.
func (mr *MockTriggerEvaluatorMockRecorder) EvaluateEventTrigger(ctx, trigger, program, ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateEventTrigger", reflect.TypeOf((*MockTriggerEvaluator)(nil).EvaluateEventTrigger), ctx, trigger, program, ev)
}

// EvaluateSignalTrigger mocks base method.
func (m *MockTriggerEvaluator) EvaluateSignalTrigger(ctx context.Context, trigger *models.Trigger, program cel.Program, signal *triggerevaluator.SignalEvaluationData) (*triggerevaluator.TriggerEvaluationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateSignalTrigger", ctx, trigger, program, signal)
	ret0, _ := ret[0].(*triggerevaluator.TriggerEvaluationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateSignalTrigger indicates an expected call of EvaluateSignalTrigger.
func (mr *MockTriggerEvaluatorMockRecorder) EvaluateSignalTrigger(ctx, trigger, program, signal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateSignalTrigger", reflect.TypeOf((*MockTriggerEvaluator)(nil).EvaluateSignalTrigger), ctx, trigger, program, signal)
}

// MockWebhookCache is a mock of WebhookCache interface.
type MockWebhookCache struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookCacheMockRecorder
	isgomock struct{}
}

// MockWebhookCacheMockRecorder is the mock recorder for MockWebhookCache.
type MockWebhookCacheMockRecorder struct {
	mock *MockWebhookCache
}

// NewMockWebhookCache creates a new mock instance.
func NewMockWebhookCache(ctrl *gomock.Controller) *MockWebhookCache {
	mock := &MockWebhookCache{ctrl: ctrl}
	mock.recorder = &MockWebhookCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookCache) EXPECT() *MockWebhookCacheMockRecorder {
	return m.recorder
}

// GetWebhooks mocks base method.
func (m *MockWebhookCache) GetWebhooks(vehicleDID, service, metricName string) []*webhookcache.Webhook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhooks", vehicleDID, service, metricName)
	ret0, _ := ret[0].([]*webhookcache.Webhook)
	return ret0
}

// GetWebhooks indicates an expected call of GetWebhooks.
func (mr *MockWebhookCacheMockRecorder) GetWebhooks(vehicleDID, service, metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhooks", reflect.TypeOf((*MockWebhookCache)(nil).GetWebhooks), vehicleDID, service, metricName)
}

// ScheduleRefresh mocks base method.
func (m *MockWebhookCache) ScheduleRefresh(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScheduleRefresh", ctx)
}

// ScheduleRefresh indicates an expected call of ScheduleRefresh.
func (mr *MockWebhookCacheMockRecorder) ScheduleRefresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRefresh", reflect.TypeOf((*MockWebhookCache)(nil).ScheduleRefresh), ctx)
}
