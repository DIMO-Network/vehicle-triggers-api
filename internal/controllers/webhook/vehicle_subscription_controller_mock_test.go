// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_subscription_controller.go
//
// Generated by this command:
//
//	mockgen -source=vehicle_subscription_controller.go -destination=vehicle_subscription_controller_mock_test.go -package=webhook
//

// Package webhook is a generated GoMock package.
package webhook

import (
	context "context"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityClient is a mock of IdentityClient interface.
type MockIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityClientMockRecorder
	isgomock struct{}
}

// MockIdentityClientMockRecorder is the mock recorder for MockIdentityClient.
type MockIdentityClientMockRecorder struct {
	mock *MockIdentityClient
}

// NewMockIdentityClient creates a new mock instance.
func NewMockIdentityClient(ctrl *gomock.Controller) *MockIdentityClient {
	mock := &MockIdentityClient{ctrl: ctrl}
	mock.recorder = &MockIdentityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityClient) EXPECT() *MockIdentityClientMockRecorder {
	return m.recorder
}

// GetSharedVehicles mocks base method.
func (m *MockIdentityClient) GetSharedVehicles(ctx context.Context, developerLicense []byte) ([]cloudevent.ERC721DID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedVehicles", ctx, developerLicense)
	ret0, _ := ret[0].([]cloudevent.ERC721DID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedVehicles indicates an expected call of GetSharedVehicles.
func (mr *MockIdentityClientMockRecorder) GetSharedVehicles(ctx, developerLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedVehicles", reflect.TypeOf((*MockIdentityClient)(nil).GetSharedVehicles), ctx, developerLicense)
}

// MockTokenExchangeClient is a mock of TokenExchangeClient interface.
type MockTokenExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExchangeClientMockRecorder
	isgomock struct{}
}

// MockTokenExchangeClientMockRecorder is the mock recorder for MockTokenExchangeClient.
type MockTokenExchangeClientMockRecorder struct {
	mock *MockTokenExchangeClient
}

// NewMockTokenExchangeClient creates a new mock instance.
func NewMockTokenExchangeClient(ctrl *gomock.Controller) *MockTokenExchangeClient {
	mock := &MockTokenExchangeClient{ctrl: ctrl}
	mock.recorder = &MockTokenExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExchangeClient) EXPECT() *MockTokenExchangeClientMockRecorder {
	return m.recorder
}

// HasVehiclePermissions mocks base method.
func (m *MockTokenExchangeClient) HasVehiclePermissions(ctx context.Context, assetDid cloudevent.ERC721DID, developerLicense common.Address, permissions []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVehiclePermissions", ctx, assetDid, developerLicense, permissions)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasVehiclePermissions indicates an expected call of HasVehiclePermissions.
func (mr *MockTokenExchangeClientMockRecorder) HasVehiclePermissions(ctx, assetDid, developerLicense, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVehiclePermissions", reflect.TypeOf((*MockTokenExchangeClient)(nil).HasVehiclePermissions), ctx, assetDid, developerLicense, permissions)
}
