// Code generated by MockGen. DO NOT EDIT.
// Source: webhook_controller.go
//
// Generated by this command:
//
//	mockgen -source=webhook_controller.go -destination=webhook_controller_mock_test.go -package=webhook
//

// Package webhook is a generated GoMock package.
package webhook

import (
	context "context"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	models "github.com/DIMO-Network/vehicle-triggers-api/internal/db/models"
	triggersrepo "github.com/DIMO-Network/vehicle-triggers-api/internal/services/triggersrepo"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTrigger mocks base method.
func (m *MockRepository) CreateTrigger(ctx context.Context, req triggersrepo.CreateTriggerRequest) (*models.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", ctx, req)
	ret0, _ := ret[0].(*models.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockRepositoryMockRecorder) CreateTrigger(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockRepository)(nil).CreateTrigger), ctx, req)
}

// CreateVehicleSubscription mocks base method.
func (m *MockRepository) CreateVehicleSubscription(ctx context.Context, assetDID cloudevent.ERC721DID, triggerID string) (*models.VehicleSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicleSubscription", ctx, assetDID, triggerID)
	ret0, _ := ret[0].(*models.VehicleSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicleSubscription indicates an expected call of CreateVehicleSubscription.
func (mr *MockRepositoryMockRecorder) CreateVehicleSubscription(ctx, assetDID, triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicleSubscription", reflect.TypeOf((*MockRepository)(nil).CreateVehicleSubscription), ctx, assetDID, triggerID)
}

// DeleteAllVehicleSubscriptionsForTrigger mocks base method.
func (m *MockRepository) DeleteAllVehicleSubscriptionsForTrigger(ctx context.Context, triggerID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllVehicleSubscriptionsForTrigger", ctx, triggerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllVehicleSubscriptionsForTrigger indicates an expected call of DeleteAllVehicleSubscriptionsForTrigger.
func (mr *MockRepositoryMockRecorder) DeleteAllVehicleSubscriptionsForTrigger(ctx, triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllVehicleSubscriptionsForTrigger", reflect.TypeOf((*MockRepository)(nil).DeleteAllVehicleSubscriptionsForTrigger), ctx, triggerID)
}

// DeleteTrigger mocks base method.
func (m *MockRepository) DeleteTrigger(ctx context.Context, triggerID string, developerLicense common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", ctx, triggerID, developerLicense)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockRepositoryMockRecorder) DeleteTrigger(ctx, triggerID, developerLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockRepository)(nil).DeleteTrigger), ctx, triggerID, developerLicense)
}

// DeleteVehicleSubscription mocks base method.
func (m *MockRepository) DeleteVehicleSubscription(ctx context.Context, triggerID string, assetDID cloudevent.ERC721DID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicleSubscription", ctx, triggerID, assetDID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVehicleSubscription indicates an expected call of DeleteVehicleSubscription.
func (mr *MockRepositoryMockRecorder) DeleteVehicleSubscription(ctx, triggerID, assetDID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicleSubscription", reflect.TypeOf((*MockRepository)(nil).DeleteVehicleSubscription), ctx, triggerID, assetDID)
}

// GetTriggerByIDAndDeveloperLicense mocks base method.
func (m *MockRepository) GetTriggerByIDAndDeveloperLicense(ctx context.Context, triggerID string, developerLicense common.Address) (*models.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerByIDAndDeveloperLicense", ctx, triggerID, developerLicense)
	ret0, _ := ret[0].(*models.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerByIDAndDeveloperLicense indicates an expected call of GetTriggerByIDAndDeveloperLicense.
func (mr *MockRepositoryMockRecorder) GetTriggerByIDAndDeveloperLicense(ctx, triggerID, developerLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerByIDAndDeveloperLicense", reflect.TypeOf((*MockRepository)(nil).GetTriggerByIDAndDeveloperLicense), ctx, triggerID, developerLicense)
}

// GetTriggersByDeveloperLicense mocks base method.
func (m *MockRepository) GetTriggersByDeveloperLicense(ctx context.Context, developerLicense common.Address) ([]*models.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersByDeveloperLicense", ctx, developerLicense)
	ret0, _ := ret[0].([]*models.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggersByDeveloperLicense indicates an expected call of GetTriggersByDeveloperLicense.
func (mr *MockRepositoryMockRecorder) GetTriggersByDeveloperLicense(ctx, developerLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersByDeveloperLicense", reflect.TypeOf((*MockRepository)(nil).GetTriggersByDeveloperLicense), ctx, developerLicense)
}

// GetVehicleSubscriptionsByTriggerID mocks base method.
func (m *MockRepository) GetVehicleSubscriptionsByTriggerID(ctx context.Context, triggerID string) ([]*models.VehicleSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleSubscriptionsByTriggerID", ctx, triggerID)
	ret0, _ := ret[0].([]*models.VehicleSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleSubscriptionsByTriggerID indicates an expected call of GetVehicleSubscriptionsByTriggerID.
func (mr *MockRepositoryMockRecorder) GetVehicleSubscriptionsByTriggerID(ctx, triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleSubscriptionsByTriggerID", reflect.TypeOf((*MockRepository)(nil).GetVehicleSubscriptionsByTriggerID), ctx, triggerID)
}

// GetVehicleSubscriptionsByVehicleAndDeveloperLicense mocks base method.
func (m *MockRepository) GetVehicleSubscriptionsByVehicleAndDeveloperLicense(ctx context.Context, assetDID cloudevent.ERC721DID, developerLicense common.Address) ([]*models.VehicleSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleSubscriptionsByVehicleAndDeveloperLicense", ctx, assetDID, developerLicense)
	ret0, _ := ret[0].([]*models.VehicleSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleSubscriptionsByVehicleAndDeveloperLicense indicates an expected call of GetVehicleSubscriptionsByVehicleAndDeveloperLicense.
func (mr *MockRepositoryMockRecorder) GetVehicleSubscriptionsByVehicleAndDeveloperLicense(ctx, assetDID, developerLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleSubscriptionsByVehicleAndDeveloperLicense", reflect.TypeOf((*MockRepository)(nil).GetVehicleSubscriptionsByVehicleAndDeveloperLicense), ctx, assetDID, developerLicense)
}

// GetWebhookOwner mocks base method.
func (m *MockRepository) GetWebhookOwner(ctx context.Context, webhookID string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookOwner", ctx, webhookID)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookOwner indicates an expected call of GetWebhookOwner.
func (mr *MockRepositoryMockRecorder) GetWebhookOwner(ctx, webhookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookOwner", reflect.TypeOf((*MockRepository)(nil).GetWebhookOwner), ctx, webhookID)
}

// UpdateTrigger mocks base method.
func (m *MockRepository) UpdateTrigger(ctx context.Context, trigger *models.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrigger", ctx, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrigger indicates an expected call of UpdateTrigger.
func (mr *MockRepositoryMockRecorder) UpdateTrigger(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrigger", reflect.TypeOf((*MockRepository)(nil).UpdateTrigger), ctx, trigger)
}

// MockWebhookCache is a mock of WebhookCache interface.
type MockWebhookCache struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookCacheMockRecorder
	isgomock struct{}
}

// MockWebhookCacheMockRecorder is the mock recorder for MockWebhookCache.
type MockWebhookCacheMockRecorder struct {
	mock *MockWebhookCache
}

// NewMockWebhookCache creates a new mock instance.
func NewMockWebhookCache(ctrl *gomock.Controller) *MockWebhookCache {
	mock := &MockWebhookCache{ctrl: ctrl}
	mock.recorder = &MockWebhookCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookCache) EXPECT() *MockWebhookCacheMockRecorder {
	return m.recorder
}

// ScheduleRefresh mocks base method.
func (m *MockWebhookCache) ScheduleRefresh(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScheduleRefresh", ctx)
}

// ScheduleRefresh indicates an expected call of ScheduleRefresh.
func (mr *MockWebhookCacheMockRecorder) ScheduleRefresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRefresh", reflect.TypeOf((*MockWebhookCache)(nil).ScheduleRefresh), ctx)
}
