// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/webhooks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all registered webhooks for the developer.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "List all webhooks",
                "responses": {
                    "200": {
                        "description": "List of webhooks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers_webhook.WebhookView"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new webhook with the specified configuration. The target URI is validated to ensure it is a valid URL, responds with 200 within a timeout, and returns a verification token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Register a new webhook",
                "parameters": [
                    {
                        "description": "Webhook configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.RegisterWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Webhook registered successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.RegisterWebhookResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or target URI"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/webhooks/signals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches the list of signal names available for the data field.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get signal names",
                "responses": {
                    "200": {
                        "description": "List of signal names",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers_webhook.SignalDefinition"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/webhooks/vehicles/{vehicleTokenId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all webhook subscriptions for a given vehicle.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "List subscriptions for a vehicle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vehicle Token ID",
                        "name": "vehicleTokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers_webhook.SubscriptionView"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns every vehicleTokenId currently subscribed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "List all vehicles subscribed to a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the configuration of a webhook by its ID. The failure count is reset to 0 when updating a webhook.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Update a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Webhook configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.UpdateWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook updated successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.UpdateWebhookResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload"
                    },
                    "404": {
                        "description": "Webhook not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a webhook by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Delete a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "404": {
                        "description": "Webhook not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/subscribe/all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribes every vehicle shared with this developer to the webhook.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Subscribe all shared vehicles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Count of subscribed vehicles",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/subscribe/list": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribes each vehicleTokenId to the webhook.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Assign multiple vehicles to a webhook from a list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Count of subscribed vehicles",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/subscribe/{vehicleTokenId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Associates a vehicle with a specific event webhook.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Assign a vehicle to a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Vehicle Token ID",
                        "name": "vehicleTokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vehicle assigned",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/unsubscribe/all": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes every shared vehicle subscription for this webhook.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Unsubscribe all shared vehicles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of unsubscribed vehicles",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/unsubscribe/list": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unsubscribes each vehicleTokenId from the webhook.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Unsubscribe multiple vehicles from a webhook using a list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of unsubscribed vehicles",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/webhooks/{webhookId}/unsubscribe/{vehicleTokenId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a vehicle's subscription.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhooks"
                ],
                "summary": "Unsubscribe a vehicle from a webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Vehicle Token ID",
                        "name": "vehicleTokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicle removed",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers_webhook.GenericResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_controllers_webhook.GenericResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message provides a brief status message for the operation.",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.RegisterWebhookRequest": {
            "type": "object",
            "required": [
                "condition",
                "coolDownPeriod",
                "metricName",
                "service",
                "targetURL",
                "verificationToken"
            ],
            "properties": {
                "condition": {
                    "description": "Condition is a CEL expression evaluated against the metric to decide when to fire.",
                    "type": "string",
                    "example": "valueNumber \u003e 55"
                },
                "coolDownPeriod": {
                    "description": "CoolDownPeriod is the minimum number of seconds between successive firings.",
                    "type": "integer",
                    "example": 30
                },
                "description": {
                    "description": "Description is an optional human-friendly explanation of the webhook.",
                    "type": "string",
                    "example": "This webhook is used to notify when the speed of the vehicle exceeds 55 mph."
                },
                "displayName": {
                    "description": "DisplayName is a user-friendly unique name per developer license.",
                    "type": "string",
                    "example": "Speed Alert"
                },
                "metricName": {
                    "description": "MetricName is the fully qualified signal/metric to monitor.",
                    "type": "string",
                    "example": "speed"
                },
                "service": {
                    "description": "Service is the subsystem producing the metric (e.g. \"vehicles\").",
                    "type": "string",
                    "example": "telemetry.signals"
                },
                "status": {
                    "description": "Status sets the initial state for the webhook (e.g. \"enabled\" or \"Disabled\").",
                    "type": "string",
                    "example": "enabled"
                },
                "targetURL": {
                    "description": "TargetURL is the HTTPS endpoint that will receive webhook callbacks.",
                    "type": "string",
                    "example": "https://example.com/webhook"
                },
                "verificationToken": {
                    "description": "VerificationToken is the expected token that your endpoint must echo back during verification.",
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "internal_controllers_webhook.RegisterWebhookResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier of the created webhook.",
                    "type": "string"
                },
                "message": {
                    "description": "Message provides a brief status message for the operation.",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.SignalDefinition": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description briefly explains what the signal represents.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the JSON-safe name of the signal.",
                    "type": "string"
                },
                "unit": {
                    "description": "Unit is the unit of measurement for the signal value (if any).",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.SubscriptionView": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is when the subscription was created.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the optional description from the webhook trigger.",
                    "type": "string"
                },
                "vehicleTokenId": {
                    "description": "VehicleTokenID is the on-chain token ID of the vehicle.",
                    "type": "string"
                },
                "webhookId": {
                    "description": "webhookID is the identifier of the webhook trigger.",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.UpdateWebhookRequest": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "Condition updates the CEL expression used to decide when to fire.",
                    "type": "string"
                },
                "coolDownPeriod": {
                    "description": "CoolDownPeriod updates the minimum number of seconds between firings.",
                    "type": "integer"
                },
                "description": {
                    "description": "Description updates the optional human-friendly explanation of the webhook.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName updates the user-friendly unique name per developer license.",
                    "type": "string"
                },
                "status": {
                    "description": "Status updates the current state of the webhook (e.g. \"enabled\" or \"Disabled\").",
                    "type": "string"
                },
                "targetURL": {
                    "description": "TargetURL updates the HTTPS endpoint that will receive callbacks.",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.UpdateWebhookResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier of the updated webhook.",
                    "type": "string"
                },
                "message": {
                    "description": "Message provides a brief status message for the operation.",
                    "type": "string"
                }
            }
        },
        "internal_controllers_webhook.WebhookView": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "Condition is the CEL expression evaluated to decide when to fire.",
                    "type": "string"
                },
                "coolDownPeriod": {
                    "description": "CoolDownPeriod is the minimum number of seconds between successive firings.",
                    "type": "integer"
                },
                "createdAt": {
                    "description": "CreatedAt is when the webhook was created.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is an optional human-friendly explanation of the webhook.",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the user-friendly unique name per developer license.",
                    "type": "string"
                },
                "failureCount": {
                    "description": "FailureCount counts consecutive delivery failures for observability.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the unique identifier of the webhook.",
                    "type": "string"
                },
                "metricName": {
                    "description": "MetricName is the fully qualified signal/metric monitored by the webhook.",
                    "type": "string"
                },
                "service": {
                    "description": "Service is the subsystem producing the metric (e.g. \"vehicles\").",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the current state of the webhook (e.g. \"enabled\" or \"Disabled\").",
                    "type": "string"
                },
                "targetURL": {
                    "description": "TargetURL is the HTTPS endpoint that receives webhook callbacks.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is when the webhook was last modified.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Vehicle Triggers API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
